#!/bin/bash
###############################################################################
##
# FILE:		executionMarker
# PRODUCT:	tools
# AUTHOR:	Ingo Karkat <ingo@karkat.de>
# DATE CREATED:	13-Apr-2019
#
###############################################################################
# CONTENTS:
#   Records (and later retrieves) the (time of the) execution of a command (with
#   an optional CONTEXT).
#
# REMARKS:
#
# @(#)executionMarker	$Id$	tools
###############################################################################
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--basedir DIR|--base-type config|data|runtime|cache] [-n|--namespace NAMESPACE] -g|--group GROUP [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... (--start-read-transaction OWNER-ID [--transaction-timeout TX-TIMEOUT]|--start-write-transaction OWNER-ID [--transaction-timeout TX-TIMEOUT]|--upgrade-to-write-transaction OWNER-ID [--transaction-timeout TX-TIMEOUT]|--end-transaction OWNER-ID|--abort-write-transaction OWNER-ID) [--timeout SECONDS] [--silence-transaction-errors]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '... [(-t|--transactional [--transaction-timeout TX-TIMEOUT]|--within-transaction|-T|--no-transaction) [--timeout SECONDS] [--silence-transaction-errors]] ...'
    printf 'Usage: %q %s\n' "$(basename "$1")" '    ... -u|--update SUBJECT [-C|--keep-context|-c|--context CONTEXT|-] [-t|--timestamp EPOCH]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '    ... -d|--diff SUBJECT [-f|--fallback-subject FALLBACK-SUBJECT]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '    ... -t|--time SUBJECT [--format DATE-FORMAT|""] [-f|--fallback-subject FALLBACK-SUBJECT]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '    ... -q|--query SUBJECT [-w|--within|-W|--without VALID-TIMESPAN[SUFFIX]|second|minute|hour|day|week|month|year|every N (seconds|minutes|hours|days|weeks)] [-x|--get-context] [-f|--fallback-subject FALLBACK-SUBJECT]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '    ... -D|--delete SUBJECT'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Records (and later retrieves) the (time of the) execution of a command (with an
optional CONTEXT).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --basedir DIR		Set the base directory in which the NAMESPACE
				dir / TABLE file is stored. Defaults to
				XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}.
    --base-type config|data|runtime|cache
				Set the base directory based on the passed
				characterization. The default is "config".
    --namespace|-n NAMESPACE	Optional application / use case for this tool's
				use. Determines the configuration directory.
    --group|-g GROUP		Category in the context of the application.
				Determines the configuration file.
    --update|-u SUBJECT		Record the execution time of SUBJECT.
    --context|-c CONTEXT|-	Optional context for SUBJECT, e.g. the command's
				exit status, or command output (can be
				multi-line). With -, this is read from standard
				input.
    --keep-context|-C		Just update the execution time, but keep the
				existing context from the prior run.
    --timestamp|-t EPOCH	Write EPOCH instead of the current time.
				(For other actions, use EPOCH instead of now for
				comparison.)
    --diff|-d SUBJECT		Determine the time difference between the last
				execution of SUBJECT and now. Returns 4 if no
				record for SUBJECT exists.
    --time|-t SUBJECT		Return the time of the last execution of SUBJECT
				and now. Returns 4 if no record for SUBJECT
				exists.
    --format DATE-FORMAT|""	Instead of returning the last execution time as
				a Unix epoch, format this as DATE-FORMAT. If
				empty, uses the default date format.
    --query|-q SUBJECT		Query whether a record for SUBJECT exists.
    --within|-w VALID-TIMESPAN|TIMESLOT
				Checks whether the time difference between the
				last execution of SUBJECT and now is smaller or
				equal to VALID-TIMESPAN / falls inside TIMESLOT.
				Returns 1 if it is larger / outside the slot or
				4 if no record for SUBJECT exists.
				TIMESPAN is NUMBER[SUFFIX], where SUFFIX may be
				's' for seconds (the default), 'm' for minutes,
				'h' for hours or 'd' for days.
				TIMESLOT can be one of
				second|minute|hour|day|week|month|year, or
				every N seconds|minutes|hours|days|weeks, which
				doesn't translate to a fixed minimal timespan,
				but instead ensures that this happens at least
				once in the slot. For example, 'day' could mean
				two executions within seconds, if the first
				check happens before midnight and the next
				shortly after midnight.
    --without|-W VALID-TIMESPAN|TIMESLOT
				Checks whether the time difference between the
				last execution of SUBJECT and now is larger or
				equal to VALID-TIMESPAN / falls outside
				TIMESLOT.
    --get-context|-x		Prints the recorded CONTEXT for SUBJECT (if it
				exists).
    --fallback-subject|-f FALLBACK-SUBJECT
				Lookup FALLBACK-SUBJECT instead if SUBJECT
				hasn't been recorded.
    --delete|-D SUBJECT		Remove the record for SUBJECT.
TRANSACTIONS:
    --transactional|-t		Lock GROUP during the access so that recordings
				are serialized and concurrent retrievals can
				only happen while no recording is under way.
				Pass this to ensure consistency in case there
				could ever be contention over the recording of
				executions.
    --timeout SECONDS		Fail if the lock to check for / start a
				transaction cannot be acquired within SECONDS
				(instead of waiting indefinitely) (because
				another transaction is still active).
				0 means fail rather than wait if the lock cannot
				be acquired immediately.
    --no-transaction|-T		Allow access to GROUP outside of a transaction.
				Note that this may return inconsistent data or
				even cause data loss, unless you know what
				you're doing!
    --silence-transaction-errors
				Don't print transaction-related errors (but keep
				printing warnings). This can be used if a
				fallback action is implemented, e.g.
    $(basename "$1") --start-read-transaction "\$\$"
    value="\$($(basename "$1") --within-transaction "\$\$" --query ...)"
    if ! $(basename "$1") --silence-transaction-errors --upgrade-to-write-transaction "\$\$"
    then
	$(basename "$1") --silence-transaction-errors --end-transaction "\$\$"
	if $(basename "$1") --start-write-transaction "\$\$"; then
	    value="\$($(basename "$1") --within-transaction "\$\$" --query ...)"
	else
	    # error
	fi
    fi
    $(basename "$1") --within-transaction "\$\$" --update ... \$value
    $(basename "$1") --end-transaction "\$\$"
    --start-read-transaction OWNER-ID
				Start a transaction that does not record
				executions, just retrieves them.
				Until --end-transaction (or TX-TIMEOUT), no
				other updates to the GROUP are possible.
    --start-write-transaction OWNER-ID
				Start a transaction that records executions.
				Until --end-transaction (or TX-TIMEOUT), no
				other reads or updates to the GROUP are
				possible.
    --upgrade-to-write-transaction OWNER-ID
				Change a held transaction that was started with
				--start-read-transaction (and hasn't become
				shared) to also allow recordings of executions.
				Until --end-transaction (or TX-TIMEOUT, which is
				extended), no other reads or updates to the
				GROUP are possible.
    --transaction-timeout TX-TIMEOUT
				A transition is automatically aborted if more
				than TX-TIMEOUT (default 3) seconds passed since
				--start-*-transaction.
    --within-transaction OWNER-ID
				Perform a recording / retrieval of execution(s)
				within the transaction.
    --end-transaction OWNER-ID
				End the transaction, so that other clients can
				do updates again. If this does not happen within
				TX-TIMEOUT, another transaction may be started
				and aborts this one.
    --abort-write-transaction OWNER-ID
				End the transaction, and undo any recordings
				done within it.
EXIT STATUS:
    0	Complete success.
    1	Failed to retrieve / record / delete an execution.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	The queried SUBJECT (nor FALLBACK-SUBJECT if given) / to-be-deleted
	SUBJECT does not exist.
    5	Time out while waiting to start a transaction.
    6	The current transaction has taken too long (TX-TIMEOUT). On
	modifications --within-transaction, aborts. On --end-transaction, if it
	was pre-empted by another one, any updates have been lost.
HELPTEXT
}

getSpan()
{
    local divider="$1"; shift
    divider="${divider#every }"
    divider="${divider% +([a-z])}"
    printf '%d' "$divider"
}
parseTime()
{
    case "$1" in
	+([0-9])?(s))		    timespan="${1%s}";;
	+([0-9])m)		    timespan=$((${1%m} * 60));;
	+([0-9])h)		    timespan=$((${1%h} * 3600));;
	+([0-9])d)		    timespan=$((${1%d} * 86400));;
	+([0-9])w)		    timespan=$((${1%d} * 604800));;
	second)			    timeformat='%s';;
	minute)			    timeformat='%F_%H:%M';;
	hour)			    timeformat='%F_%H';;
	day)			    timeformat='%F';;
	week)			    timeformat='%G_%V';;
	month)			    timeformat='%Y_%m';;
	year)			    timeformat='%Y';;
	every\ +([0-9])\ seconds)   timespan="$(getSpan "$1")"; timedivider=1;;
	every\ +([0-9])\ minutes)   timespan="$(getSpan "$1")"; timedivider=60;;
	every\ +([0-9])\ hours)	    timespan="$(getSpan "$1")"; timedivider=3600;;
	every\ +([0-9])\ days)	    timespan="$(getSpan "$1")"; timedivider=86400;;
	every\ +([0-9])\ weeks)	    timespan="$(getSpan "$1")"; timedivider=604800;;
	*)			    printf >&2 'ERROR: Invalid TIMESPAN/TIMESLOT: "%s".\n' "$1"; printUsage "$0" >&2; exit 2;;
    esac
}
multipleActionsError()
{
    echo >&2 "ERROR: Only one of --update, --diff, --time, --query, --delete, --start-read-transaction, --start-write-transaction, --upgrade-to-write-transaction, --within-transaction, --end-transaction, --abort-write-transaction allowed."
    echo >&2
    printUsage "$1" >&2
    exit 2
}
multipleTransactionsError()
{
    echo >&2 "ERROR: --transactional cannot be combined with --no-transaction or the --start-read-transaction|--start-write-transaction|--upgrade-to-write-transaction|--within-transaction|--end-transaction|--abort-write-transaction set, and only one from the set can be given."
    echo >&2
    printUsage "$1" >&2
    exit 2
}
now="$(date +%s)"
typeset -a miniDbArgs=()
typeset -a transactionArgs=()
typeset -a transactionSupportingArgs=()
namespace=
group=
subject=
fallbackSubject=
context=
isKeepContext=
action=
isGetContext=
timespan=
timeformat=
timedivider=
unset dateFormat
spanCompareOp=
formatCompareOp=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--basedir)	miniDbArgs+=("$1" "$2"); shift; shift;;
	--base-type)	miniDbArgs+=("$1" "$2"); shift; shift;;
	--transactional|-t|--no-transaction|-T)
					[ ${#transactionArgs[@]} -eq 0 ] || multipleTransactionsError "$0"; transactionArgs=("$1"); shift;;
	--within-transaction)		[ ${#transactionArgs[@]} -eq 0 ] || multipleTransactionsError "$0"; transactionArgs=("$1" "$2"); shift; shift;;
	--start-read-transaction|--start-write-transaction|--upgrade-to-write-transaction|--end-transaction|--abort-write-transaction)
					[ ${#transactionArgs[@]} -eq 0 ] || multipleTransactionsError "$0"; [ "$action" ] && multipleActionsError "$0"; action='database'; subject='dummy'; transactionArgs=("$1" "$2"); shift; shift;;
	--timeout|--transaction-timeout)
					transactionSupportingArgs+=("$1" "$2"); shift; shift;;
	--silence-transaction-errors)	transactionSupportingArgs+=("$1"); shift;;
	--namespace|-n)	shift; namespace="$1"; shift;;
	--group|-g)	shift; group="$1"; shift;;
	--context|-c)	shift
			if [ "$1" = '-' ]; then
			    context="$(< /dev/stdin)"
			else
			    context="$1"
			fi
			shift
			;;
	--keep-context|-C)	shift; isKeepContext=t;;
	--timestamp|-t)		shift; now="$1"; shift;;
	--format)		shift; dateFormat="$1"; shift;;
	--get-context|-x)	shift; isGetContext=t;;
	--fallback-subject|-f)	shift; fallbackSubject="$1"; shift;;
	--within|-w)	shift; parseTime "$1"; spanCompareOp='-ge'; formatCompareOp='='; shift;;
	--without|-W)	shift; parseTime "$1"; spanCompareOp='-le'; formatCompareOp='!='; shift;;
	--update|-u)	shift; [ "$action" ] && multipleActionsError "$0"; action='update'; subject="$1"; shift;;
	--diff|-d)	shift; [ "$action" ] && multipleActionsError "$0"; action='timediff'; subject="$1"; shift;;
	--time|-t)	shift; [ "$action" ] && multipleActionsError "$0"; action='lasttime'; subject="$1"; shift;;
	--query|-q)	shift; [ "$action" ] && multipleActionsError "$0"; action='query'; subject="$1"; shift;;
	--delete|-D)	shift; [ "$action" ] && multipleActionsError "$0"; action='delete'; subject="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
for parameter in action group subject
do
    if [ -z "${!parameter}" ]; then
	echo "ERROR: No $parameter passed."
	echo
	printUsage "$0"
	exit 2
    fi >&2
done
if [ $# -gt 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
if [ -n "$timespan" -o -n "$timeformat" -o -n "$timedivider" ]; then
    if [ "$action" = 'query' ]; then
	action='timerange'
    else
	echo "ERROR: --within and --without can only be combined with --query"
	echo
	printUsage "$0"
	exit 2
    fi >&2
fi

database()
{
    miniDB "${miniDbArgs[@]}" "${transactionSupportingArgs[@]}" "${transactionArgs[@]}" --namespace "$namespace" --table "$group" "$@"
}

writeMarker()
{
    database --schema 'SUBJECT TIMESTAMP CONTEXT' --update "$subject	$now	$context"
}

deleteMarker()
{
    database --delete "$subject"
}

readMarker()
{
    line="$(database --query "$subject" ${fallbackSubject:+--fallback "$fallbackSubject"} --columns \*)"
    [ "$line" ] || return 1

    markerTimestamp="${line%%	*}"
    markerContext="${line#*	}"
}

printContext()
{
    if [ "$isGetContext" ]; then
	printf '%s\n' "$markerContext"
    fi
}


update()
{
    if [ "$isKeepContext" ]; then
	readMarker
	context="$markerContext"
    fi

    writeMarker
}

timediff()
{
    if [ "$isGetContext" ]; then
	echo 'ERROR: Cannot query context with --diff.'
	echo
	printUsage "$0"
	return 2
    fi >&2

    readMarker || return 4

    printf '%d\n' "$((now - markerTimestamp))"
}

lasttime()
{
    if [ "$isGetContext" ]; then
	echo 'ERROR: Cannot query context with --time.'
	echo
	printUsage "$0"
	return 2
    fi >&2

    readMarker || return 4

    if [ -n "${dateFormat+t}" ]; then
	date --date "@$markerTimestamp" ${dateFormat:+"+$dateFormat"}
    else
	printf '%d\n' "$markerTimestamp"
    fi
}

query()
{
    readMarker || return $?
    printContext
}

timerange()
{
    readMarker || return 4
    printContext

    if [ "$timeformat" ]; then
	local thisRun lastRun
	thisRun="$(date --date "@$now" "+$timeformat")" || exit 3
	lastRun="$(date --date "@$markerTimestamp" "+$timeformat")" || exit 3
	[ "$lastRun" $formatCompareOp "$thisRun" ]
    elif [ "$timedivider" ]; then
	local thisDivision lastDivision
	thisDivision="$((now / timedivider))"
	lastDivision="$((markerTimestamp / timedivider))"
	[ $timespan $spanCompareOp $((thisDivision - lastDivision)) ]
    else
	[ $markerTimestamp $spanCompareOp $((now - timespan)) ]
    fi
}

delete()
{
    deleteMarker || return 1
}


"$action"
